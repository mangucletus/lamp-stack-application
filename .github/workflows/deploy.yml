name: Deploy LAMP Stack Application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: eu-west-1
  TF_VERSION: 1.5.0
  DEPLOYMENT_BUCKET: lamp-deployment-cletusmangu-1749764715

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    outputs:
      instance_ip: ${{ steps.terraform-output.outputs.instance_ip }}
    
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      if: github.event_name == 'pull_request'
      run: |
        terraform plan -var="public_key=${{ secrets.EC2_PUBLIC_KEY }}" -no-color
      continue-on-error: true

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        terraform apply -var="public_key=${{ secrets.EC2_PUBLIC_KEY }}" -auto-approve

    - name: Get Terraform Outputs
      if: github.ref == 'refs/heads/main'
      id: terraform-output
      run: |
        echo "instance_ip=$(terraform output -raw instance_public_ip)" >> $GITHUB_OUTPUT

  deploy:
    name: 'Deploy Application'
    runs-on: ubuntu-latest
    needs: terraform
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Wait for EC2 instance to be ready
      run: |
        echo "Waiting for EC2 instance to be fully initialized..."
        sleep 180

    - name: Deploy via SSH
      env:
        PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        INSTANCE_IP: ${{ needs.terraform.outputs.instance_ip }}
      run: |
        # Save private key to file
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        
        # Wait for SSH to be available
        echo "Waiting for SSH connection to $INSTANCE_IP..."
        for i in {1..30}; do
          if ssh -i private_key.pem -o StrictHostKeyChecking=no -o ConnectTimeout=10 ubuntu@$INSTANCE_IP "echo 'SSH connection successful'"; then
            echo "SSH connection established!"
            break
          fi
          echo "Waiting for SSH... attempt $i/30"
          sleep 15
        done
        
        # Deploy application files
        echo "Deploying application files..."
        scp -i private_key.pem -o StrictHostKeyChecking=no -r app/* ubuntu@$INSTANCE_IP:/tmp/
        
        # Move files to web directory and set permissions
        echo "Setting up web application..."
        ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@$INSTANCE_IP "
          # Wait for user data script to complete
          while [ ! -f /var/log/cloud-init-output.log ] || ! grep -q 'LAMP Stack installation completed' /var/log/cloud-init-output.log; do
            echo 'Waiting for LAMP stack installation to complete...'
            sleep 30
          done
          
          # Deploy application files
          sudo cp /tmp/*.php /tmp/*.css /var/www/html/ 2>/dev/null || echo 'Some files may not exist, continuing...'
          sudo chown -R www-data:www-data /var/www/html/
          sudo chmod -R 755 /var/www/html/
          
          # Restart services
          sudo systemctl restart apache2
          sudo systemctl restart mysql
          
          # Verify application
          echo 'Application deployment completed!'
          ls -la /var/www/html/
        "
        
        # Clean up
        rm -f private_key.pem
        
        echo "🎉 Application deployed successfully!"
        echo "🌐 Access your application at: http://$INSTANCE_IP"