name: Deploy LAMP Stack Application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: eu-west-1
  TF_VERSION: 1.5.0

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      if: github.event_name == 'pull_request'
      run: |
        terraform plan -var="public_key=${{ secrets.EC2_PUBLIC_KEY }}" -no-color
      continue-on-error: true

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        terraform apply -var="public_key=${{ secrets.EC2_PUBLIC_KEY }}" -auto-approve

    - name: Get Terraform Outputs
      if: github.ref == 'refs/heads/main'
      id: terraform-output
      run: |
        echo "instance_ip=$(terraform output -raw instance_public_ip)" >> $GITHUB_OUTPUT

  deploy:
    name: 'Deploy Application'
    runs-on: ubuntu-latest
    needs: terraform
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Wait for EC2 instance to be ready
      run: |
        echo "Waiting for EC2 instance to be fully initialized..."
        sleep 180

    - name: Deploy Application Files
      run: |
        # Create deployment package
        tar -czf app-deployment.tar.gz -C app .
        
        # Upload to S3 (temporary storage)
        aws s3 cp app-deployment.tar.gz s3://your-deployment-bucket/app-deployment.tar.gz
        
        # Download and extract on EC2 instance via user data or Systems Manager
        # For this example, we'll use a simple approach with S3 and instance user data
        echo "Application package uploaded to S3"

    - name: Deploy via SSH
      env:
        PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        INSTANCE_IP: ${{ needs.terraform.outputs.instance_ip }}
      run: |
        # Save private key to file
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        
        # Wait for SSH to be available
        for i in {1..30}; do
          if ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@$INSTANCE_IP "echo 'SSH connection successful'"; then
            break
          fi
          echo "Waiting for SSH... attempt $i/30"
          sleep 10
        done
        
        # Deploy application files
        scp -i private_key.pem -o StrictHostKeyChecking=no -r app/* ubuntu@$INSTANCE_IP:/tmp/
        
        # Move files to web directory and set permissions
        ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@$INSTANCE_IP "
          sudo cp -r /tmp/*.php /tmp/*.css /var/www/html/
          sudo chown -R www-data:www-data /var/www/html/
          sudo chmod -R 755 /var/www/html/
          sudo systemctl restart apache2
        "
        
        # Clean up
        rm -f private_key.pem
        
        echo "Application deployed successfully!"